{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"totalCount":18,"edges":[{"node":{"id":"8a8a0640-97d8-5d0c-8222-2a19a05f7b26","html":"<h2>Identify Steps that can be automated</h2>\n<p>Automation can be designed by breaking up a complex task into many, simple tasks. We can take a few tasks that can be seen as a manual process.</p>\n<p>One of the following issues that I have is doing deployment for software. I also need to notify my monitoring service when a new software release occurred.</p>\n<p>Problem: I need to deploy working software to my server.</p>\n<h2>Step 1. Generalize The Process</h2>\n<p>We can identify the basic steps required to update and change the current server software. In the simple deployment case, I see it work like this.</p>\n<ol>\n<li>Build Software</li>\n<li>Test Software</li>\n<li>Push New Build of Software to Server</li>\n<li>Run installations and changes on Server.</li>\n<li>Restart Service</li>\n<li>Notify Monitoring Service</li>\n</ol>\n<p>So the flowchart looks like this:</p>\n<p><img src=\"/images/automation/deployment-flowchart.png\" alt=\"Flowchart of the Steps listed above\" title=\"Flowchart of the Step listed above\"></p>\n<h2>Step 2. Breakdown Process into multiple Smaller Steps</h2>\n<p>So each of these steps have mini steps put together.</p>\n<h3>Build Software</h3>\n<ol>\n<li>I take changes from my git repository and update to the newest version.</li>\n<li>I optimize any assets that need optimization. This includes images, or final CSS output.</li>\n</ol>\n<h3>Test Software</h3>\n<ol start=\"3\">\n<li>I run any Integration tests to make sure there are no regressions.</li>\n<li>I run any Unit tests to make sure there are no regressions.</li>\n</ol>\n<h3>Push New Build of Software to Server</h3>\n<ol start=\"4\">\n<li>I produce a package that I upload to one of my servers</li>\n<li>I unzip the package to the correct directory.</li>\n</ol>\n<h3>Run Installation and changes on Server</h3>\n<ol start=\"6\">\n<li>I install any updated packages</li>\n<li>I Apply any schema migrations</li>\n</ol>\n<h3>Restart Services</h3>\n<ol start=\"8\">\n<li>I restart the web and app services.</li>\n</ol>\n<h3>Notify Monitoring Services</h3>\n<ol start=\"9\">\n<li>I Notify NewRelic that a new build has been launched.</li>\n</ol>\n<p><img src=\"/images/automation/deployment-flowchart-part-2.png\" alt=\"Additional Steps as from above, with breaking down of each step\"></p>\n<h2>Step 3. Identify How to Trigger this Process</h2>\n<p>We have different ways to determine how automation should trigger. Currently we have these two types of events.</p>\n<h3>Time Based Processes</h3>\n<p>These are things that are meant to run on a schedule. They are triggered based on what time it is.</p>\n<p>Examples:</p>\n<ul>\n<li>Every week, rotate the log files.</li>\n<li>Every 5 minutes, check if the service is online</li>\n<li>On the first of every month, generate a report of user time and usage.</li>\n</ul>\n<h3>Event Based Processes</h3>\n<p>These are events that are triggered based on criteria.</p>\n<p>Examples:</p>\n<ul>\n<li>When I get an email, copy the subject line to a new file</li>\n<li>When a User submits a form, write information to a database.</li>\n<li>When code is submitted, run automated tests.</li>\n</ul>\n<p>In our case, we</p>\n<h2>Step 4. Build steps using a Clean Room Approach</h2>","frontmatter":{"title":"Steps to Automation","date":"15 July, 2019"},"excerpt":"Identify Steps that can be automated Automation can be designed by breaking up a complex task into many, simple tasks. We can take a few…"}},{"node":{"id":"0febf2b4-2c15-5872-a837-70c439083a68","html":"<p>So I spent half a day fixing the following errors. The layout on Rental Cars Search results have been broken on Safari. We suspected that this had to do with Safari's sppecific handling of divs and invalid HTML.</p>\n<h2>The General Setup</h2>\n<p>So the affected code in question looks like this. We have a homebrew JS template that looks and acts roughly like this.</p>\n<pre><code>&#x3C;script type=\"text/template\" id=\"rental-car-details\">\r\n    &#x3C;div>\r\n       ...\r\n    &#x3C;/div>\r\n&#x3C;/script>\r\n\r\n... Somewhere in a JS file...\r\n\r\nvar details = $('#rental-car-details').clone();\r\n...\r\ndetails.replace(\"{{pricing}}\", priceDetails);\r\n...\r\nresultsBody.append(details);\n</code></pre>\n<p>We have a template, and we build a DOM element, that gets injected after results come back from an AJAX request.</p>\n<h2>Check the Commit Logs</h2>\n<p>We confirmed with QA that this was a new bug. Checking the logs, we see only one major commit from the last valid section.</p>\n<h1>Test By Bisection</h1>\n<p>I reduced a lot of the code down to make sure that no other divs were affecting it. To make sure that the layout was stable even before this chunk of template exists.</p>\n<p>Since this template is loaded via a template tag in Javascript. I started commenting out code and anything irrelevant, to find the part of the load that breaks the code.</p>\n<h2>The Cause</h2>\n<p>I started commenting out different parts of the template, and was able to identify the exact line of HTML that causes the problem.</p>\n<p>This was that line</p>\n<pre><code>{{strike}}\r\n&#x3C;span class=\"actual-price\">\r\n    &#x3C;span class=\"dollar\">$&#x3C;/span>{{period_price}}\r\n&#x3C;/span>\r\n&#x3C;span class=\"perday\">/{{period.abbr}}&#x3C;/span>\n</code></pre>\n<p>So we kept pairing it down. to eventually get to:</p>\n<pre><code>&#x3C;span class=\"dollar\">$&#x3C;/span>\n</code></pre>\n<p>Yes, so while this is okay in most of the browsers, for some reason, in Safari. When this is injected, this breaks the layout.</p>\n<h3>Test cases for solutions.</h3>\n<p>So we did some small tests, seeing if it had something to do with the characters, or the signs. And what we came up was this:</p>\n<pre><code>&#x3C;!-- This *somehow* fixes it -->\r\n&#x3C;span class=\"dollar\"> $ &#x3C;/span>\r\n\r\n&#x3C;!-- This is still broken -->\r\n&#x3C;span class=\"dollar\"> $&#x3C;/span>\r\n\r\n&#x3C;!-- This is still broken -->\r\n&#x3C;span class=\"dollar\">$ &#x3C;/span>\n</code></pre>\n<p>So we found that Javascript Engine in Safari parses the <code>>$&#x3C;</code> character incorrectly. It required atleast 3 characters within between the span.</p>\n<h1>Solution:</h1>\n<p>So to make the least breaking changes possible, I eneded up with the following.</p>\n<pre><code>&#x3C;!-- Safari fix: single dollar sign ($) breaks layout. -->\r\n&#x3C;span class=\"dollar\">&#x26;#36;&#x3C;/span>{{period_price}}\n</code></pre>\n<p>I would love to know why this breaks in Safari. But we'll have to investigate the root cause another day.</p>","frontmatter":{"title":"Strange Bug: Safari Parsing","date":"26 March, 2019"},"excerpt":"So I spent half a day fixing the following errors. The layout on Rental Cars Search results have been broken on Safari. We suspected that…"}},{"node":{"id":"923b3e01-e6fb-5b9e-935c-1532b38583d9","html":"<p>This meetup was graciously hosted by Dmytro Malikov. He put on his own Cook and Code at his home, with a few of his coworkers here, Eric and Matt.</p>\n<p>We tried to implement the single chef / sous chef during this cook and code.</p>\n<h2>Recipe</h2>\n<p>Dmytro suggested that we get adventurous, bringing Rabbit from this local latin market.</p>\n<p>We ended up doing this recipe:</p>\n<p><a href=\"\">https://cooking.nytimes.com/recipes/12254-italian-style-braised-rabbit-with-rosemary-and-mushrooms</a></p>\n<h2>Snacks</h2>\n<p>Matt brought Chips and I prepared some Rosemary red potatoes. Really helped keep the motivation up while we tried to figure out the rabbit.</p>\n<h2>Struggles are real</h2>\n<p>So we had some issues following this recipe. This was my first time cooking rabbit, and I wasn't prepare to be a butcher. I forgot to carry my Dad's Heavy cleaver, and tried sawing away at the bones and spine. Since it was Dmytro's knife, I feared the back of the rabbit would snap the thin blade.</p>\n<p>I had to call over Dmytro to handle the Rabbit. Snap, went the shoulders, the mid back and the hind legs. In my 10 minutes of fiddling, he tore through the bones in 45 grunt filled seconds.</p>\n<h2>Team Troubleshooting</h2>\n<p>Dmytro had a little CSS problem. We were able to cast it up on his projector and team debug it.</p>\n<h2>Results</h2>\n<p>I didn't think the Rabbit came out too well. Overcooked it. Even though it was my first rabbit. Jimmy made some backup ribs, and it went over well.</p>","frontmatter":{"title":"Cook and Code 3: Rabbit Season","date":"19 February, 2018"},"excerpt":"This meetup was graciously hosted by Dmytro Malikov. He put on his own Cook and Code at his home, with a few of his coworkers here, Eric and…"}},{"node":{"id":"ac1e8f51-7376-5d43-b8a6-b332b16d66b6","html":"<p><img src=\"/images/cook_and_code_2/group_selfie.jpg\" alt=\"Cook and Code 2\"></p>\n<p>As we make this a monthly tradition, we expndeda to having another member. This time around, we had DmytNro Malikov from Accenture come along.</p>\n<h2>Dish of the day: Apple flavored Baby Back Ribs</h2>\n<p>Part of Cook and Code is developing dishes that cook on their own while we spend our time on projects. Jimmy and Charlene brought a rack of baby back ribs, and plan to cook it in a pressure cooker pot.</p>\n<h2>Recipe</h2>\n<p><a href=\"\">https://recipes.instantpot.com/recipe/easy-bbq-instant-pot-ribs/</a></p>\n<p>We used a modification of the recipe above, but replaced water with apple juice and apple cider.</p>\n<p>We did our best to keep everyone involved. Accompanying the ribs, Dmytro and I prepped some vegetable side dishes.</p>\n<p>I love that cooking is an activity that everyone can participate. No matter what their skill level, we all have some experience in different areas of cooking.</p>\n<p>Jimmy and Charlene had some minor difficulties in cleaning the ribs, pulling away the membrane on the underside. Dmytro, our resident expert in butchery, stripped the membrane cleanly and quickly with his knife skills.</p>\n<p><img src=\"/images/cook_and_code_2/ribs_in_pot.jpg\" alt=\"Ribs in Pot\"></p>\n<h2>So Tender</h2>\n<p>The ribs came out very tender. Fell apart the bone. 10/10 would 1000% recommend.</p>\n<p>For vegetables. I cooked up some sweet potato fries in the oven, as well as a slaw from Costco.</p>\n<p><img src=\"/images/cook_and_code_2/ribs_on_plate.jpg\" alt=\"Ribs in Pot\"></p>\n<h2>Meetup Lessons Learned</h2>\n<p>As our second meetup, we picked up a few lessons to work on in future meetups.</p>\n<ul>\n<li>Too many cooks</li>\n<li>Too Complicated to make food</li>\n<li>Bring Snacks</li>\n<li>Time to Talk vs Time to Code</li>\n</ul>\n<h3>Issue: Too Many Cooks</h3>\n<p>We wanted to bring more focus on the working on the coding and the side projects. We had issues with people butting heads together and not having everything available for cooking available.</p>\n<p>We're seeing this could lead to scalability issues.</p>\n<h3>Solution: Less Chefs</h3>\n<p>So instead of having everyone participate in the cook, we're going to try in the next Cook and Code having a dedicated chef.</p>\n<p>We're calling this having a Lead Chef, Senior Chef as well as having an assistant chef or two.</p>\n<h3>Issue: Complex prep recipes</h3>\n<p>I'm used to spending a lot of time prepping and cooking, but this doesn't work well while we're trying to optimize for time. So from now on, we're trying to use a more simpler recipe to cook.</p>\n<h3>Solution: Simplified recipes</h3>\n<p>Simple enough. Make easier stuff, simpler items.</p>\n<h3>Issue: Time to Talk vs Time to Code</h3>\n<p>So there are some awkward moments where people weren't sure when it is a good time to talk, or focus on work. This occurred mostly during the early period of coding, or during cooking.</p>\n<h3>Solution: Dedicated Scheduling</h3>\n<p>So this was brought up by Jimmy. We probably need to have dedicated time slots so people know when to do what.</p>\n<p>We built a template of the schedule, and try to adhere to it.</p>\n<ul>\n<li>Social Periods: Intro and Eating. Talk as much as you'd like</li>\n<li>Work Periods: Keep chit chat to relevant projects. Or take chats to IMs messaging instead. Follow the headset rules.</li>\n</ul>\n<p><img src=\"/images/cook_and_code_2/group_photo.jpg\" alt=\"Selfie including Tommy\"></p>","frontmatter":{"title":"Cook and Code 2: Cooking Ribs","date":"13 January, 2018"},"excerpt":"Cook and Code 2 As we make this a monthly tradition, we expndeda to having another member. This time around, we had DmytNro Malikov from…"}},{"node":{"id":"48c3d0b8-e78b-5f37-8744-ae8d1935337e","html":"<p><img src=\"/images/cookout_and_code_1/cookout_and_code.jpg\" alt=\"Cook and Code 1\"></p>\n<p>So Jimmy Vo and I have a time management problem. We try our best to balance what time we have to:</p>\n<ul>\n<li>Expand and maintain our social circle</li>\n<li>Learn new tech stuff or work on side projects</li>\n<li>Cook and learn more recipes</li>\n</ul>\n<p>So he came up with this brilliant idea: A meetup dedicated to cook and code.</p>\n<h2>Introducing Orlando's Cook and Code Together</h2>\n<p>The concept is simple. Developers meet up. We prep some food together, then code. While the food is either marinating or cooking, we work on some personal development, with fellow developers nearby to bounce ideas or get assistance.</p>\n<h2>Meeting #1: Beef Burgundy</h2>\n<p>We chose a simple recipe, that takes a while to cook. I grew up eating my dad's beef burgundy. Sweet, rich, meaty stew that takes an entire day to cook.</p>\n<p>We found a recipe that can be cooked within 3 hours. You can find it here:</p>\n<p><a href=\"http://allrecipes.com/recipe/23342/beef-burgundy-i/\">Beef burgundy recipe</a></p>\n<p><img src=\"/images/cookout_and_code_1/raw_ingredients.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<p>We divided the labor so that everyone can get to cook asap. I chopped up the vegetables, while Jimmy browned the steak chunks. Browning the meat is important in stews, since it adds additional flavor, and preserves some of the texture.</p>\n<p><img src=\"/images/cookout_and_code_1/sizzle_pan.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<p>So we threw in all the vegetables, with the water and bottle of wine into a large pot, and left it to cook. I made sure that it didn't boil over and stirred it around occasionally.</p>\n<p><img src=\"/images/cookout_and_code_1/cooking_1.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<h2>Coding Goals</h2>\n<p>For our coding session, we made goals that can be achieved by the end of the session. I try to use [S.M.A.R.T] goals as a framework of choosing what to complete.</p>\n<p>For Jimmy, he's playing with Azure and working on hosting his website.</p>\n<p>For me, I'm playing with React to create a form page for one of my side projects.</p>\n<p>As with any learning experience, we ran into some issues. I ran into some issues with the ES6 Syntax and how CommonJS module loading works. Jimmy's azure account was having issues, and couldn't get access to the right areas for deployment.</p>\n<p>Around the hour mark, I check on the stew.</p>\n<p><img src=\"/images/cookout_and_code_1/cooking_2.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<p>We decided to work on figuring out how to get Jimmy's project deployed. I remembered that .NET Core could be deployed on Ubuntu, so we went ahead and worked on some basic deployment on Ubuntu.</p>\n<p>It was a great learning experience for Jimmy, since he's from a Windows shop. It was some configurations of nginx, and installing .NET Core CLI to the server.</p>\n<p><img src=\"/images/cookout_and_code_1/downloading_stuff.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<p>We pick up a lot of small, unwritten things when we work with others. We learn habits from our friends and family, lessons from our mistakes. I passed down some of my experience doing sysadmin stuff, and deploying stuff on Linux. We learned from repeated errors trying to get the site to run.</p>\n<p>In cooking, I made a great mistake with the initial prep for the stew. Instead of seeing the meat slowly get softer, but remain in one piece, the meat started breaking apart. The sweet, winey liquid I expected was non-existent.</p>\n<p>I forgot to coat the meat in flour.</p>\n<p>So we had braised beef instead.</p>\n<p><img src=\"/images/cookout_and_code_1/cooking_3.jpg\" alt=\"Cook and Code Raw Ingredients\"></p>\n<h2>Lessons Learned for a Successful Cook and Code</h2>\n<p>So with a completed work, and a full stomach, we call the inaugural Cook and Code Together a success! We learned some new recipes to serve and food prep, and expanded what we knew and had something to work towards in the future.</p>\n<p>Some recommendations we have for others:</p>\n<ul>\n<li>Choose a recipe you haven't tried yet</li>\n<li>Divide the labor</li>\n<li>Set measurable goals</li>\n</ul>\n<h2>Cook and Code Schedule Template</h2>\n<p>We follow the following time-line for most cook and codes.</p>\n<ul>\n<li>11:00 AM - Event Start and meal prep and cook. Social time and people get together.</li>\n<li>11:30 AM - Start coding. Waiting until the food is ready.</li>\n<li>02:00 PM - Food is served.</li>\n<li>03:00 PM - Clean up.</li>\n</ul>\n<p>We have another cook and code coming up soon. We usually keep it small so that the group can work together well. While we can divide up the cooking for just one person, working together on the recipe lets everyone share in the experience.</p>","frontmatter":{"title":"Cook and Code 1: Cooking and Coding Together","date":"13 October, 2017"},"excerpt":"Cook and Code 1 So Jimmy Vo and I have a time management problem. We try our best to balance what time we have to: Expand and maintain our…"}}]}},"pageContext":{}},"staticQueryHashes":[]}