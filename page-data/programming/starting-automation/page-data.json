{"componentChunkName":"component---src-templates-blog-page-js","path":"/programming/starting-automation/","result":{"data":{"markdownRemark":{"id":"40c3eecf-55f4-5f36-9f05-8cfbc3af0a8d","html":"<h2>Identify Steps that can be automated</h2>\n<p>Automation can be designed by breaking up a complex task into many, simple tasks. We can take a few tasks that can be seen as a manual process.</p>\n<p>One of the following issues that I have is doing deployment for software. I also need to notify my monitoring service when a new software release occurred. </p>\n<p>Problem: I need to deploy working software to my server.</p>\n<h2>Step 1. Generalize The Process</h2>\n<p>We can identify the basic steps required to update and change the current server software. In the simple deployment case, I see it work like this.</p>\n<ol>\n<li>Build Software</li>\n<li>Test Software</li>\n<li>Push New Build of Software to Server</li>\n<li>Run installations and changes on Server.</li>\n<li>Restart Service</li>\n<li>Notify Monitoring Service</li>\n</ol>\n<p>So the flowchart looks like this:</p>\n<p><img src=\"/images/automation/deployment-flowchart.png\" alt=\"Flowchart of the Steps listed above\" title=\"Flowchart of the Step listed above\"></p>\n<h2>Step 2. Breakdown Process into multiple Smaller Steps</h2>\n<p>So each of these steps have mini steps put together.</p>\n<h3>Build Software</h3>\n<ol>\n<li>I take changes from my git repository and update to the newest version.</li>\n<li>I optimize any assets that need optimization. This includes images, or final CSS output.</li>\n</ol>\n<h3>Test Software</h3>\n<ol start=\"3\">\n<li>I run any Integration tests to make sure there are no regressions.</li>\n<li>I run any Unit tests to make sure there are no regressions.</li>\n</ol>\n<h3>Push New Build of Software to Server</h3>\n<ol start=\"4\">\n<li>I produce a package that I upload to one of my servers</li>\n<li>I unzip the package to the correct directory.</li>\n</ol>\n<h3>Run Installation and changes on Server</h3>\n<ol start=\"6\">\n<li>I install any updated packages</li>\n<li>I Apply any schema migrations</li>\n</ol>\n<h3>Restart Services</h3>\n<ol start=\"8\">\n<li>I restart the web and app services.</li>\n</ol>\n<h3>Notify Monitoring Services</h3>\n<ol start=\"9\">\n<li>I Notify NewRelic that a new build has been launched.</li>\n</ol>\n<p><img src=\"/images/automation/deployment-flowchart-part-2.png\" alt=\"Additional Steps as from above, with breaking down of each step\"></p>\n<h2>Step 3. Identify How to Trigger this Process</h2>\n<p>We have different ways to determine how automation should trigger. Currently we have these two types of events.</p>\n<h3>Time Based Processes</h3>\n<p>These are things that are meant to run on a schedule. They are triggered based on what time it is.</p>\n<p>Examples:</p>\n<ul>\n<li>Every week, rotate the log files. </li>\n<li>Every 5 minutes, check if the service is online</li>\n<li>On the first of every month, generate a report of user time and usage.</li>\n</ul>\n<h3>Event Based Processes</h3>\n<p>These are events that are triggered based on criteria. </p>\n<p>Examples:</p>\n<ul>\n<li>When I get an email, copy the subject line to a new file</li>\n<li>When a User submits a form, write information to a database.</li>\n<li>When code is submitted, run automated tests.</li>\n</ul>\n<p>In our case, we </p>\n<h2>Step 4. Build steps using a Clean Room Approach</h2>","frontmatter":{"title":"Steps to Automation","date":"15 July, 2019"}}},"pageContext":{"slug":"/programming/starting-automation/"}}}